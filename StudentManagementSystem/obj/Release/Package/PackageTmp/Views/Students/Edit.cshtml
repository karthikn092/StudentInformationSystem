@model StudentManagementSystem.Models.Student

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "Students", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Student</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.StudentId)

        <div class="form-group">
            @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Dob, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Dob, "{0:dd-MMM-yyyy}", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Dob, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            if (Model.Photo != null)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.Photo, htmlAttributes: new { @class = "control-label col-md-2" })
                    @Html.HiddenFor(model => model.Photo)
                    <div class="col-md-10">
                        @{var base64 = Convert.ToBase64String(Model.Photo);
                            var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                            <img src="@imgSrc" height=100 width=200 />}
                    </div>
                </div>
                            }
        }

        <div class="form-group">
            @Html.Label("Change Photo", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="ImageData" id="ImageData" onchange="fileCheck(this);" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @class = "form-control", @disabled = true, @id = "age" } })
                @Html.HiddenFor(model => model.Age, new { @id = "agehidden" })
                @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("College", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.CollegeString, new SelectList(Model.CollegeCollection, "Value", "Text"), "Select College", new { @id = "collegedrop" })
                @Html.ValidationMessageFor(model => model.CollegeString, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Course", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.CourseString, new SelectList(Model.CoursesList, "Value", "Text"), "Select Course", new { @id = "coursedrop" })
                @Html.ValidationMessageFor(model => model.CourseString, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Semester", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.SemesterString, new SelectList(Model.SemestersList, "Value", "Text"), "Select Semester", new { @id = "semesterdrop" })
                @Html.ValidationMessageFor(model => model.SemesterString, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Grade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(x => x.Grade, new SelectList(Model.GradeCollection, "Value", "Text"), "Select Grade", new { @id = "gradedrop" })
                @Html.ValidationMessageFor(model => model.Grade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
                            }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />
<script>
    $("#@Html.IdFor(m => m.Dob)").datepicker({
        onSelect: function (value, ui) {
            var today = new Date(),
                age = today.getFullYear() - ui.selectedYear;
            $('#age').val(age);
            $('#agehidden').val(age);
        },
         dateFormat: 'dd-MM-yy',
         changeMonth: true,
         changeYear: true,
         yearRange: '-100y:c+nn',
         maxDate: '-1d'
    });
    $(document).ready(function () {
        $("#collegedrop, #coursedrop").change(function () {
            $("#State").empty();
            var id = $(this).attr('id');
            var value = $(this).val();
            if (id == "collegedrop") {
                $("#coursedrop").empty();
                $("#coursedrop").append('<option value="">' +
                    "Select Course" + '</option>');
            }
            if (id == "coursedrop") {
                $("#semesterdrop").empty();
                $("#semesterdrop").append('<option value="">' +
                    "Select Semester" + '</option>');
            }
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetDropDown","Students")', // we are calling json method
                dataType: 'json',
                data: { dropId: id, dropValue: value },
                success: function (states) {
                    $.each(states, function (i, state) {
                        if (id == "collegedrop")
                        {
                            $("#coursedrop").append('<option value="' + state.Value + '">' +
                                state.Text + '</option>');
                        }
                        if (id == "coursedrop") {
                            $("#semesterdrop").append('<option value="' + state.Value + '">' +
                                state.Text + '</option>');
                        }
                    });
                },
                error: function (ex) {
                    alert('Failed to retrieve Values.');
                }
            });
            return false;
        })
    });
</script>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
