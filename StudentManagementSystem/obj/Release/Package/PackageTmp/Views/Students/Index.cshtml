@model IEnumerable<StudentManagementSystem.Models.Student>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table" id="studenttable">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.StudentName)
            <img src="~/fonts/sort.png" onclick="sortTable(0)" id="sortimage" />
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Dob)
            <img src="~/fonts/sort.png" onclick="sortTable(1)" id="sortimage" />
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Photo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Age)
            <img src="~/fonts/sort.png" onclick="sortTable(3)" id="sortimage" />
        </th>
        <th>
            <span>College</span>
            <img src="~/fonts/sort.png" onclick="sortTable(4)" id="sortimage" />
        </th>
        <th>
            <span>Course</span>
            <img src="~/fonts/sort.png" onclick="sortTable(5)" id="sortimage" />
        </th>
        <th>
            <span>Semester</span>
            <img src="~/fonts/sort.png" onclick="sortTable(6)" id="sortimage" />
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Grade)
            <img src="~/fonts/sort.png" onclick="sortTable(7)" id="sortimage" />
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.StudentName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Dob, "{0:dd-MMM-yyyy}", new { htmlAttributes = new { @class = "datespan" } })
                @*@{string date = item.Dob != null ? item.Dob.Value.ToString("dd MMM yyyy") : "";}
                    <span class="datespan" >@date</span>*@
            </td>
            <td>
                @{if (item.Photo != null)
                {
                    var base64 = Convert.ToBase64String(item.Photo);
                    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
                        <img src="@imgSrc" height=100 width=200 />
                    }
                }
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Age)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CollegeString)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CourseString)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SemesterString)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Grade)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.StudentId }) |
                @Html.ActionLink("Details", "Details", new { id = item.StudentId }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.StudentId })
            </td>
        </tr>
                    }

</table>

<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("studenttable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (n != 1) {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else if (n == 1) {
                        var dateFirst = rows[i].getElementsByTagName("TD")[n].innerHTML.trim().split("-");
                        var currentdate = new Date(dateFirst[2], dateFirst[1] - 1, dateFirst[0]);

                        var dateSecond = rows[i + 1].getElementsByTagName("TD")[n].innerHTML.trim().split("-");
                        var seconddate = new Date(dateSecond[2], dateSecond[1] - 1, dateSecond[0]);

                        if (currentdate > seconddate) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }

                } else if (dir == "desc") {
                    if (n != 1) {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                    else if (n == 1) {
                        var dateFirst = rows[i].getElementsByTagName("TD")[n].innerHTML.trim().split("-");
                        var currentdate = new Date(dateFirst[2], dateFirst[1] - 1, dateFirst[0]);

                        var dateSecond = rows[i + 1].getElementsByTagName("TD")[n].innerHTML.trim().split("-");
                        var seconddate = new Date(dateSecond[2], dateSecond[1] - 1, dateSecond[0]);

                        if (currentdate < seconddate) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }

                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
